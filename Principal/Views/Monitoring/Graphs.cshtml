@*
    This is the example main content of the AdminLTE demo and represents a good smattering of AdminLTE functionality in a cshtml
    TODO: Delete this file when you're ready to start building your app
*@

@{

}

@model PrincipalAPI.Models.Host
@using PrincipalAPI.Models

<div class="row">
    <!-- Left col -->
    <div class="col-md-12" style="padding-left:5%;padding-right:5%;">
        <!-- TABLE: LATEST ORDERS -->
        <div class="box box-info">
            <div class="box-header with-border">
                <h3 class="box-title">Performance Graphs</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i></button>
                </div>
                <div class="row" style="margin-top:10px;">
                    @using (Html.BeginForm()) // asta e form-ul
                    {
                        //Model e obiectul model
                        
                        <div class="row" style="display:-moz-inline-box;margin-top:10px;padding-left:50px;">
                            <h5 style="margin-right: 10px;">VM IP:</h5>
                            @Html.DropDownListFor(model => Model.HostID, Host.allHosts, new { @id = "selectedHost", @class = "form-control" })
                            <input type="submit" formaction="" value="Display" class="btn btn-primary" style="margin-left:50px;">
                        </div>
                    }
                </div>
            </div><!-- /.box-header -->

            <div class="box-body" style="padding:0px !important;">

                <div id="content">


                    <div class="demo-container">
                        <div id="placeholder" class="demo-placeholder"></div>
                    </div>

                </div>


            </div><!-- /.box-body -->
    </div>
</div>

@section scripts {

    <script src="~/Scripts/AdminLTE/pages/dashboard2.js"></script>
    <script src="~/Scripts/AdminLTE/demo.js"></script>
<script language="javascript" type="text/javascript" src="~/Scripts/jquery.js"></script>
<script language="javascript" type="text/javascript" src="~/Scripts/jquery_float.js"></script>
    <script type="text/javascript">

	$(function() {
       var hostaID = $( "#selectedHost option:selected" )[0];
        var hostID = hostaID.value;

		// We use an inline data source in the example, usually data would
		// be fetched from a server

		var data = [],
			totalPoints = 200;

        var oldHostID = hostID;
        var startDate = new Date();
        var stopDate = new Date();
        stopDate.setMinutes(startDate.getMinutes() - 2);
        stopDate.setSeconds(startDate.getSeconds() - 10);

        function getCPUData() {

			if (data.length > 0)
				data = data.slice(1);

        var cpuValues=[];

        if(oldHostID != ($( "#selectedHost option:selected" )[0]).value)
        {
            oldHostID = ($( "#selectedHost option:selected" )[0]).value;
            stopDate = new Date();
            stopDate.setMinutes(startDate.getMinutes() - 2);
            stopDate.setSeconds(startDate.getSeconds() - 10);
            data = [];
        }

        startDate = stopDate;
        stopDate = new Date();
        stopDate.setSeconds(stopDate.getSeconds() - 10);
        $.ajax({
                url: 'http://localhost:14607/Monitoring/GetCPUsJSON?hostid='+ ($( "#selectedHost option:selected" )[0]).value + "&start=" + (startDate.toISOString()) + "&stop=" + (stopDate.toISOString()),
                dataType: 'json',
                type: 'GET',
                contentType: 'pplication/x-www-form-urlencoded; charset=utf-8',
                data: {hostid: hostID},
                async: false,
                processData: true,
                cache: false,
                success: function (resp) {
                    cpuValues = resp;
                },
                error: function (xhr) {

                }
            })

           for (i = 0; i < cpuValues.length; i++) {
                var y= cpuValues[i];
                data.push(y);
        }

			// Zip the generated y values with the x values

			var res = [];
			for (var i = 0; i < data.length; ++i) {
				res.push([i, data[i]])
			}


			return res;
		}

		// Set up the control widget

		var updateInterval = 1000;
		$("#updateInterval").val(updateInterval).change(function () {
			var v = $(this).val();
			if (v && !isNaN(+v)) {
				updateInterval = +v;
				if (updateInterval < 1) {
					updateInterval = 1;
				} else if (updateInterval > 2000) {
					updateInterval = 2000;
				}
				$(this).val("" + updateInterval);
			}
		});

		var plot = $.plot("#placeholder", [ getCPUData() ], {
			series: {
				shadowSize: 0	// Drawing is faster without shadows
			},
			yaxis: {
				min: -5,
				max: 105
			},
			xaxis: {
                show: false
			},
            "lines": {"show": "true"},
            "points": {"show": "true"},
            clickable:true,hoverable: true
		});

		function update() {
			plot.setData([getCPUData()]);

			// Since the axes don't change, we don't need to call plot.setupGrid()

			plot.draw();
			setTimeout(update, updateInterval);
		}

		update();

		// Add the Flot version string to the footer

		$("#footer").prepend("Flot " + $.plot.version + " &ndash; ");
	});

    </script>
    }